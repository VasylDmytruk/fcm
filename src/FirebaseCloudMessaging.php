<?php

namespace autoxloo\fcm;

use autoxloo\fcm\message\Message;

/**
 * Class FirebaseCloudMessaging Firebase Cloud Messaging notification sender.
 */
class FirebaseCloudMessaging
{
    const PROJECT_MARK = '_PROJECT_MARK_';
    const BASE_API_URL = 'https://fcm.googleapis.com/v1/projects/_PROJECT_MARK_/messages:send';
    const GOOGLE_APPLICATION_CREDENTIALS_ENV = 'GOOGLE_APPLICATION_CREDENTIALS';
    const SCOPE_MESSAGING = 'https://www.googleapis.com/auth/firebase.messaging';

    /**
     * @var string Api url will be generated by replacing [[FirebaseCMNotification::PROJECT_MARK]]
     * onto [[FirebaseCMNotification::projectId]] in [[FirebaseCMNotification::BASE_API_URL]].
     */
    protected $apiUrl;
    /**
     * @var
     */
    protected $httpClient;


    /**
     * FirebaseCloudMessaging constructor.
     *
     * @param string $projectId Project ID of the Firebase project for your app.
     * This ID is available in the General project settings tab of the Firebase console.
     * @see https://console.firebase.google.com/project/_/settings/general/
     *
     * @param string $serviceAccountFile Path to generated private key file in JSON format.
     * @see https://console.firebase.google.com/project/_/settings/serviceaccounts/adminsdk
     */
    public function __construct($projectId, $serviceAccountFile)
    {
        if (!$projectId) {
            throw new \InvalidArgumentException('Param "projectId" is required');
        }

        if (!file_exists($serviceAccountFile)) {
            throw new \InvalidArgumentException(
                "Param 'serviceAccountFile' ({$serviceAccountFile}) should be valid path to service account file"
            );
        }

        $this->apiUrl = str_replace(self::PROJECT_MARK, $projectId, self::BASE_API_URL);

        $envToPut = self::GOOGLE_APPLICATION_CREDENTIALS_ENV . '=' . $serviceAccountFile;
        putenv($envToPut);

        $client = new \Google_Client();
        $client->useApplicationDefaultCredentials();
        $client->addScope(self::SCOPE_MESSAGING);

        $this->httpClient = $client->authorize();
    }

    /**
     * Sends push notification.
     *
     * @param Message $message Request body to send push notification.
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function send(Message $message)
    {
        $response = $this->httpClient->post(
            $this->apiUrl,
            [
                'body' => json_encode($message),
            ]
        );

        return $response;
    }
}